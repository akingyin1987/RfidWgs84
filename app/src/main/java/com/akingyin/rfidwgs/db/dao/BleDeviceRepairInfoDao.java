package com.akingyin.rfidwgs.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.akingyin.rfidwgs.db.BleDeviceRepairInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_ble_device_repair_info".
*/
public class BleDeviceRepairInfoDao extends AbstractDao<BleDeviceRepairInfo, Long> {

    public static final String TABLENAME = "tb_ble_device_repair_info";

    /**
     * Properties of entity BleDeviceRepairInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BatchId = new Property(1, Long.class, "batchId", false, "BATCH_ID");
        public final static Property BleDeviceAddress = new Property(2, String.class, "bleDeviceAddress", false, "BLE_DEVICE_ADDRESS");
        public final static Property RepairStatus = new Property(3, Integer.class, "repairStatus", false, "REPAIR_STATUS");
        public final static Property RepairTime = new Property(4, String.class, "repairTime", false, "REPAIR_TIME");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(6, Long.class, "updateTime", false, "UPDATE_TIME");
    }


    public BleDeviceRepairInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BleDeviceRepairInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_ble_device_repair_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BATCH_ID\" INTEGER," + // 1: batchId
                "\"BLE_DEVICE_ADDRESS\" TEXT," + // 2: bleDeviceAddress
                "\"REPAIR_STATUS\" INTEGER," + // 3: repairStatus
                "\"REPAIR_TIME\" TEXT," + // 4: repairTime
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"UPDATE_TIME\" INTEGER);"); // 6: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_ble_device_repair_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BleDeviceRepairInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long batchId = entity.getBatchId();
        if (batchId != null) {
            stmt.bindLong(2, batchId);
        }
 
        String bleDeviceAddress = entity.getBleDeviceAddress();
        if (bleDeviceAddress != null) {
            stmt.bindString(3, bleDeviceAddress);
        }
 
        Integer repairStatus = entity.getRepairStatus();
        if (repairStatus != null) {
            stmt.bindLong(4, repairStatus);
        }
 
        String repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindString(5, repairTime);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BleDeviceRepairInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long batchId = entity.getBatchId();
        if (batchId != null) {
            stmt.bindLong(2, batchId);
        }
 
        String bleDeviceAddress = entity.getBleDeviceAddress();
        if (bleDeviceAddress != null) {
            stmt.bindString(3, bleDeviceAddress);
        }
 
        Integer repairStatus = entity.getRepairStatus();
        if (repairStatus != null) {
            stmt.bindLong(4, repairStatus);
        }
 
        String repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindString(5, repairTime);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BleDeviceRepairInfo readEntity(Cursor cursor, int offset) {
        BleDeviceRepairInfo entity = new BleDeviceRepairInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // batchId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bleDeviceAddress
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // repairStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // repairTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BleDeviceRepairInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatchId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBleDeviceAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRepairStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRepairTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BleDeviceRepairInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BleDeviceRepairInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BleDeviceRepairInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
